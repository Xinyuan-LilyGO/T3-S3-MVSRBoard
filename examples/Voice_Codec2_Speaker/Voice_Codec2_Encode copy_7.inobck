/*
 * @Description:
            Example of microphone speaker
        Re output the microphone input data from the speaker
 * @Author: LILYGO_L
 * @Date: 2023-12-21 11:30:50
 * @LastEditTime: 2024-10-22 15:18:25
 * @License: GPL 3.0
 */
#include "Arduino_DriveBus_Library.h"
#include "pin_config.h"
#include "codec2.h"

// 44.1 KHz
#define IIS_SAMPLE_RATE 16000 // 采样速率
#define IIS_DATA_BIT 16       // 数据位数

std::vector<char> iis_write_data_stream;

bool MAX_Play_Flag = false;

bool Codec2_Encode_Run_Flag = false;
bool Codec2_Decode_Run_Flag = false;
short Codec2_Offset = 0;

uint8_t Codec2_Data_Encode_Output[8];
short Codec2_Data_Encode_Input[360];

short Codec2_Data_Decode_Output[360];
uint8_t Codec2_Data_Decode_Input[8];

std::shared_ptr<Arduino_IIS_DriveBus> IIS_Bus_0 =
    std::make_shared<Arduino_HWIIS>(I2S_NUM_0, MSM261_BCLK, MSM261_WS, MSM261_DATA);

std::unique_ptr<Arduino_IIS> MSM261(new Arduino_MEMS(IIS_Bus_0));

std::shared_ptr<Arduino_IIS_DriveBus> IIS_Bus_1 =
    std::make_shared<Arduino_HWIIS>(I2S_NUM_1, MAX98357A_BCLK, MAX98357A_LRCLK,
                                    MAX98357A_DATA);

std::unique_ptr<Arduino_IIS> MAX98357A(new Arduino_Amplifier(IIS_Bus_1));

// The codec2
struct CODEC2 *codec2_state;

bool IIS_Mono_Processing(char *data, int32_t length, bool channel)
{
    if (length < 0 || data == NULL)
    {
        return false;
    }

    // 右声道复制到左声道
    if (channel == 0)
    {
        for (uint32_t i = 0; i < length; i += 4)
        {
            memmove(&data[i], &data[i + 2], 2);
        }
    }

    // 左声道复制到右声道
    if (channel == 1)
    {
        for (uint32_t i = 0; i < length; i += 4)
        {
            memmove(&data[i + 2], &data[i], 2);
        }
    }

    return true;
}

bool IIS_Decibel_Conversion(char *char_data, short *short_data,
                            uint32_t convert_short_numbers, bool mode)
{
    if (convert_short_numbers < 0 || char_data == NULL || short_data == NULL)
    {
        return false;
    }

    // char to short
    if (mode == 0)
    {
        for (uint32_t i = 0; i < convert_short_numbers; i++)
        {
            *(short_data++) = (int16_t)((int16_t)char_data[i * 2] | (int16_t)char_data[i * 2 + 1] << 8);
        }
    }
    else // short to char
    {
        for (uint32_t i = 0; i < convert_short_numbers; i++)
        {
            char_data[i * 2] = *short_data;
            char_data[i * 2 + 1] = *short_data >> 8;
            short_data++;
        }
    }

    return true;
}

void codec2_watcher(void *parameter)
{
    while (true)
    {
        // yield() DOES NOT work, that trips the WDT every 5 secs
        // delay(1) is VITAL
        delay(1);
        if (Codec2_Encode_Run_Flag == true)
        {

            uint32_t startTimeEncode = millis();

            // encode the 320 bytes(40ms) of speech frame into 8 bytes
            codec2_encode(codec2_state, Codec2_Data_Encode_Output, Codec2_Data_Encode_Input);
            Codec2_Encode_Run_Flag = false;

            Serial.println("Done encoding, took ms: " + String(millis() - startTimeEncode));
        }
        if (Codec2_Decode_Run_Flag == true)
        {
            uint32_t startTimeDecode = millis();

            // Decode the codec2 frame
            codec2_decode(codec2_state, Codec2_Data_Decode_Output, Codec2_Data_Decode_Input);
            Codec2_Decode_Run_Flag = false;

            Serial.println("Done decoding, took ms: " + String(millis() - startTimeDecode));
        }
    }
}

void MAX_Play_Task(void *parameter)
{
    const short max_play_numbers = 200;

    while (1)
    {
        vTaskDelay(1);
        if (MAX_Play_Flag == true)
        {
            if (iis_write_data_stream.size() == 0)
            {
                MAX_Play_Flag = false;
            }

            Serial.printf("size2: %d\n", iis_write_data_stream.size());

            if (iis_write_data_stream.size() >= max_play_numbers) // 流读取判断
            {
                char iis_data_buf[max_play_numbers];

                // 存储数据
                memcpy(iis_data_buf, iis_write_data_stream.data(), max_play_numbers);

                // 删除已经存储的数据
                iis_write_data_stream.erase(iis_write_data_stream.begin(),
                                            iis_write_data_stream.begin() + max_play_numbers);

                for (int i = 0; i < 60; i++)
                {
                    Serial.printf("debug2: %d\n", (int16_t)(iis_data_buf[i + 2] | iis_data_buf[i + 3] << 8));
                }
                Serial.println();

                if (MAX98357A->IIS_Write_Data(iis_data_buf, max_play_numbers) == true)
                {

                    // Serial.printf("MAX98357A played successfully\n");

                    // for (int i = 0; i < 25; i++)
                    // {
                    //     Serial.printf("debug: %d\n", (int16_t)(IIS_Write_Buf[i + 2] | IIS_Write_Buf[i + 3] << 8));
                    // }
                }
            }
        }
        else
        {
        }
    }
}

void setup()
{
    Serial.begin(115200);

    pinMode(MSM261_EN, OUTPUT);
    digitalWrite(MSM261_EN, HIGH);

    pinMode(MAX98357A_SD_MODE, OUTPUT);
    digitalWrite(MAX98357A_SD_MODE, HIGH);

    while (MSM261->begin(Arduino_IIS_DriveBus::Device_Data_Mode::DATA_IN,
                         IIS_SAMPLE_RATE, IIS_DATA_BIT) == false)
    {
        Serial.println("MSM261 initialization fail");
        delay(2000);
    }
    Serial.println("MSM261 initialization successfully");

    while (MAX98357A->begin(Arduino_IIS_DriveBus::Device_Data_Mode::DATA_OUT,
                            IIS_SAMPLE_RATE, IIS_DATA_BIT) == false)
    {
        Serial.println("MAX98357A initialization fail");
        delay(2000);
    }
    Serial.println("MAX98357A initialization successfully");

    // MSM261->IIS_Device_Switch(Arduino_IIS::Device_Switch::Channel_OFF);
    // MAX98357A->IIS_Device_Switch(Arduino_IIS::Device_Switch::Channel_OFF);

    // Init codec2
    // codec2_state = codec2_create(CODEC2_MODE_3200);
    // codec2_set_lpc_post_filter(codec2_state, true, 0, 0.1, 0.9);

    // xTaskCreate(&codec2_watcher, "codec2_watcher_task", 30000, NULL, 5, NULL);

    xTaskCreate(&MAX_Play_Task, "MAX_Play_Task", 30000, NULL, 5, NULL);
}

void loop()
{
    const short codec2_sampling_numbers = 5;
    char Codec2_Data_1[8 * codec2_sampling_numbers];

    char Char_Data_1[720 * codec2_sampling_numbers];

    for (int i = 0; i < codec2_sampling_numbers; i++)
    {
        char iis_read_buf[720];

        MSM261->IIS_Read_Data(iis_read_buf, 512);

        memcpy(&iis_read_buf[0], iis_read_buf, 512);

        MSM261->IIS_Read_Data(iis_read_buf, 208);

        // 当前有720个数据
        memcpy(&iis_read_buf + 512, iis_read_buf, 208);

        // 单声道处理
        IIS_Mono_Processing(iis_read_buf, 720, 0);

        // IIS_Decibel_Conversion(iis_read_buf, &Codec2_Data_Encode_Input[0], 360, 0);

        // Codec2_Encode_Run_Flag = true;
        // while (Codec2_Encode_Run_Flag)
        // {
        //     vTaskDelay(1);
        // }

        // memcpy(&Codec2_Data_1[i * 8], Codec2_Data_Encode_Output, 8);

        memcpy(&Char_Data_1[i * 720], iis_read_buf, 720);
    }

    for (int i = 0; i < 100; i++)
    {
        Serial.printf("debug1: %d\n", (int16_t)(Char_Data_1[i + 2] | Char_Data_1[i + 3] << 8));
    }
    Serial.println();

    for (int i = 0; i < codec2_sampling_numbers; i++)
    {
        char iis_write_buf[720];

        // memcpy(Codec2_Data_Decode_Input, &Codec2_Data_1[i * 8], 8);

        // Codec2_Decode_Run_Flag = true;
        // while (Codec2_Decode_Run_Flag)
        // {
        //     vTaskDelay(1);
        // }

        // IIS_Decibel_Conversion(iis_write_buf, &Codec2_Data_Decode_Output[0], 360, 1);

        size_t current_buf_size = iis_write_data_stream.size();

        // 调整容量
        iis_write_data_stream.resize(current_buf_size + 720);

        // 存储数据
        memcpy(iis_write_data_stream.data() + current_buf_size, Char_Data_1 + (i * 720), 720);
    }

    MAX_Play_Flag = true;

    vTaskDelay(2); // xTask time
}